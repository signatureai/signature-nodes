name: Git Flow CI/CD

on:
  push:
    branches:
      - main
      - develop
      - "feature/**"
      - "release/**"
      - "hotfix/**"
  pull_request:
    types: [opened, synchronize]
    branches:
      - main
      - develop
      - "release/**"

jobs:
  post-job-comment:
    if: github.event_name == 'pull_request'
    name: Comment PR
    uses: ./.github/workflows/steps-post-comment.yml
    with:
      EVENT_ISSUE_NUMBER: ${{ github.event.pull_request.number }}
      GITHUB_RUN_ID: ${{ github.run_id }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      COMMIT_SHA: ${{ github.sha }}

  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Branch Name Check
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ ! "$BRANCH_NAME" =~ ^(main|develop|feature/|release/|hotfix/) ]]; then
            echo "::warning::Branch '$BRANCH_NAME' does not follow gitflow naming convention (main|develop|feature/*|release/*|hotfix/*)"
          fi

  security:
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/security-checks.yml
    with:
      python-version: "3.11"
      post-to-pr: true
    secrets:
      TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # type: ignore
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # type: ignore
      AWS_ACCOUNT_REGION: ${{ secrets.AWS_ACCOUNT_REGION }} # type: ignore
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} # type: ignore
      CODEARTIFACT_INDEX_DOMAIN: ${{ secrets.CODEARTIFACT_INDEX_DOMAIN }} # type: ignore

  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest version
        id: get_version
        run: |
          LATEST_TAG=$(git describe --tags --match "v*" --abbrev=0 2>/dev/null || echo "v0.0.0")

          # LATEST_TAG="v1.0.0.dev10" # for testing

          echo "Latest version: $LATEST_TAG"

          if [[ $LATEST_TAG =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)(\.dev([0-9]+))?$ ]]; then
              MAJOR="${BASH_REMATCH[1]}"
              MINOR="${BASH_REMATCH[2]}"
              PATCH="${BASH_REMATCH[3]}"
              DEV="${BASH_REMATCH[5]:-0}"
          else
              echo "Error: Invalid tag format $LATEST_TAG"
              exit 1
          fi

          if [ "$DEV" -gt 0 ]; then
              NEW_DEV=$((DEV + 1))
          else
              NEW_DEV=1
              PATCH=$((PATCH + 1))
          fi

          DEV_VERSION="v${MAJOR}.${MINOR}.${PATCH}.dev${NEW_DEV}"

          echo "Creating development version: $DEV_VERSION"
          echo "DEV_VERSION=$DEV_VERSION" >> $GITHUB_ENV

      - name: Create Development Tag
        run: |
          git tag ${{ env.DEV_VERSION }}
          git push origin ${{ env.DEV_VERSION }}

  deploy-production:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4

      - name: Extract Version from commit
        id: extract_version
        run: |
          VERSION="$(git log -1 --pretty=%B | grep -o 'release/[0-9]\+\.[0-9]\+\.[0-9]\+' | sed 's/release\///' | head -n 1)"
          if [ -z "$VERSION" ]; then
            echo "Error: Version not found in commit message"
            exit 1
          fi
          echo "VERSION=v$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"

      - name: Create Release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }} # type: ignore
          release_name: Release ${{ env.VERSION }} # type: ignore
          draft: false
          prerelease: false
