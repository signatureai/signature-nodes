name: Security Checks

on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: '3.11'
        description: 'Python version to use'
      post-to-pr:
        required: false
        type: boolean
        default: true
        description: 'Whether to post results to PR'
      extra_index_domain:
        required: false
        type: string
        default: 'signature-ml-packages-production'
        description: 'AWS CodeArtifact domain name'
      aws_account_id:
        required: false
        type: string
        default: '992382511592'
        description: 'AWS account id'
    secrets:
      TOKEN:
        required: true
        description: 'GitHub token for PR comments'
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_ACCOUNT_REGION:
        required: true


permissions:
  contents: read
  pull-requests: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_ACCOUNT_REGION }}

      - name: Configure CodeArtifact URLs
        env:
          EXTRA_INDEX_DOMAIN: ${{ inputs.extra_index_domain }}
          AWS_ACCOUNT_ID: ${{ inputs.aws_account_id }}
        run: |
          echo "Generating AWS CodeArtifact token..."
          echo "UV_INDEX_SIGNATURE_PASSWORD=$(aws codeartifact get-authorization-token \
              --domain "${EXTRA_INDEX_DOMAIN}" \
              --domain-owner "${AWS_ACCOUNT_ID}" \
              --query authorizationToken \
              --output text)" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          echo "Generating AWS CodeArtifact token..."
          echo "Access AWS CodeArtifact"
          uv pip install bandit safety pylint --system
          uv pip install . --system

      - name: Run Bandit
        continue-on-error: true
        id: bandit
        run: |
          bandit -r ./ -c pyproject.toml -f json -o bandit-results.json || echo "Vulnerabilities found"

      - name: Run Safety Check
        continue-on-error: true
        id: safety
        run: |
          safety check --json > safety-results.json || echo "Vulnerable dependencies found"

      - name: Run Pylint Security Checks
        continue-on-error: true
        id: pylint
        run: |
          pylint --disable=all --enable=security --output-format=json ./ > pylint-results.json || echo "Security issues found"

      - name: Post Results to PR
        if: inputs.post-to-pr
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const fs = require('fs');
            let comment = '## Security Scan Results\n\n';

            try {
              const banditResults = JSON.parse(fs.readFileSync('bandit-results.json', 'utf8'));
              comment += '### Bandit Results\n';
              if (banditResults.results.length === 0) {
                comment += '✅ No security issues found\n\n';
              } else {
                comment += '⚠️ Security issues found:\n';
                banditResults.results.forEach(issue => {
                  comment += `- ${issue.issue_text} in ${issue.filename}:${issue.line_number}\n`;
                });
              }
            } catch (e) {
              comment += '### Bandit Results\n⚠️ Error processing results\n\n';
            }

            try {
              const safetyResults = JSON.parse(fs.readFileSync('safety-results.json', 'utf8'));
              comment += '### Safety Check Results\n';
              if (safetyResults.vulnerabilities.length === 0) {
                comment += '✅ No vulnerable dependencies found\n\n';
              } else {
                comment += '⚠️ Vulnerable dependencies found:\n';
                safetyResults.vulnerabilities.forEach(vuln => {
                  comment += `- ${vuln.package}: ${vuln.vulnerability_id}\n`;
                });
              }
            } catch (e) {
              comment += '### Safety Check Results\n⚠️ Error processing results\n\n';
            }

            try {
              const pylintResults = JSON.parse(fs.readFileSync('pylint-results.json', 'utf8'));
              comment += '### Pylint Security Results\n';
              if (pylintResults.length === 0) {
                comment += '✅ No security issues found\n\n';
              } else {
                comment += '⚠️ Security issues found:\n';
                pylintResults.forEach(issue => {
                  comment += `- ${issue.message} in ${issue.path}:${issue.line}\n`;
                });
              }
            } catch (e) {
              comment += '### Pylint Security Results\n⚠️ Error processing results\n\n';
            }

            if (context.payload.pull_request) {
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            bandit-results.json
            safety-results.json
            pylint-results.json
